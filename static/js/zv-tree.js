var ZVTree;(()=>{"use strict";var t={d:(i,n)=>{for(var h in n)t.o(n,h)&&!t.o(i,h)&&Object.defineProperty(i,h,{enumerable:!0,get:n[h]})},o:(t,i)=>Object.prototype.hasOwnProperty.call(t,i),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},i={};t.r(i),t.d(i,{draw:()=>r});const n=Math.PI/2;class h{constructor(t,i,n,h,s,e,r,a,o,c,l,b){this.x=t,this.y=i,this.r=n,this.a=h,this.g=s,this.scale=e,this.branchAngleMax=r,this.branchDiminish=a,this.branchAngleExp=o,this.branchSplitDiminish=c,this.branchSplitAngle=l,this.grains=b}step(t,i,n){this.r-=this.branchDiminish,this.x+=Math.cos(this.a)*n,this.y+=Math.sin(this.a)*n;const h=Math.pow(1+(t+i-this.r)/i,this.branchAngleExp);this.a+=h*(()=>{const t=1-Math.random(),i=1-Math.random();return Math.sqrt(-2*Math.log(t))*Math.cos(2*Math.PI*i)})()*this.branchAngleMax}draw(t){const{a:i,r:h,x:s,y:e,scale:r,grains:a}=this,o=[Math.cos(i+n),Math.sin(i+n)],c=[Math.cos(i-n),Math.sin(i-n)],l=t=>t*h*r,b=o.map(l),g=c.map(l),p=(i,n)=>t.fillRect(i,n,1,1),M=(t,i,n)=>{const s=Math.hypot(t,i);for(let e=0;e<=n;e++){const n=l(s*Math.random()*Math.random())-h*r;p(t*n,i*n)}};t.save(),t.translate(s*r,e*r),t.beginPath(),t.moveTo(...b),t.lineTo(...g),t.stroke(),t.closePath(),p(...g),M(...c,a),p(...b),M(...o,a/5),t.restore()}split(){const t=Math.pow(-1,(2,Math.floor(2*Math.random())))*Math.random();return new h(this.x,this.y,this.r*this.branchSplitDiminish,this.a+t*this.branchSplitAngle,this.g+1,this.scale,this.branchAngleMax,this.branchDiminish,this.branchAngleExp,this.branchSplitDiminish,this.branchSplitAngle,this.grains)}}class s{constructor(t,i,n,s,e,r,a,o,c,l,b,g,p,M){this.x=t,this.y=i,this.r=n,this.a=s,this.stepSize=e,this.branchProbScale=l,this.one=r,this.Q=[new h(t,i,n,s,0,a,p,b,M,g,c,o)]}step(){for(let t=this.Q.length-1;t>=0;--t){const i=this.Q[t];if(i.step(this.one,this.r,this.stepSize),i.r<=this.one){this.Q.splice(t,1);continue}const n=this.r-i.r+this.one*this.branchProbScale;Math.random()<n&&this.Q.push(i.split())}}draw(t){for(const i of this.Q)i.draw(t)}}const e=t=>({mid:.5,branchSplitDiminish:.71,branchSplitAngle:.3*Math.PI,branchAngleExp:2,trunk_stroke:"black",trunk:"white",trunk_shade:"rgba(0,0,0,0.5)",initBranch:.03,get size(){return t.width},get branchAngleMax(){return 5*Math.PI/this.size},get grains(){return Math.ceil(.02*this.size)},get branchDiminish(){return this.one/32},get one(){return 1/this.size},get branchProbScale(){return this.one/this.initBranch*18}}),r=function(t){let i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!t.getContext)throw new Error("Could not get canvas context");{const h=t.getContext("2d");i={...e(t),...i},h.lineWidth=2,h.fillStyle=i.trunk_stroke,h.strokeStyle=i.trunk;const r=new s(i.mid,1,i.initBranch,-n,i.one,i.one,i.size,i.grains,i.branchSplitAngle,i.branchProbScale,i.branchDiminish,i.branchSplitDiminish,i.branchAngleMax,i.branchAngleExp),a=()=>{r.Q.length>0&&(r.step(),r.draw(h),window.requestAnimationFrame(a))};window.requestAnimationFrame(a)}};ZVTree=i})();
//# sourceMappingURL=zv-tree.js.map